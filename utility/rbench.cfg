[GENERAL]
#Warmup iterations for run()
WARMUP_REP=2
#Benchmark iterations for run()
BENCH_REP=5
#Used for Linux perf temporary storage
PERF_TMP=_perf.tmp
#Linux perf measurement iterations
PERF_REP=1
#Linux perf command - default one
PERF_CMD=perf stat -r %(PERF_REP)s -x, -o %(PERF_TMP)s --append
#Linux perf command - measure cache behavior
#PERF_CMD=perf stat -e cache-references -e cache-misses -e L1-icache-loads -e L1-icache-load-misses -r %(PERF_REP)s -x, -o %(PERF_TMP)s --append
#PERF_CMD=perf stat -e L1-dcache-loads -e L1-dcache-load-misses -e L1-dcache-stores -e L1-dcache-store-misses -r %(PERF_REP)s -x, -o %(PERF_TMP)s --append
#PERF_CMD=perf stat -e LLC-loads -e LLC-load-misses -e LLC-stores -e LLC-store-misses -r %(PERF_REP)s -x, -o %(PERF_TMP)s --append
#PERF_CMD=perf stat -e LLC-loads -e LLC-load-misses -e LLC-stores -e LLC-store-misses -r %(PERF_REP)s -x, -o %(PERF_TMP)s --append
#PERF_CMD=perf stat -e dTLB-loads -e dTLB-load-misses -e dTLB-stores -e dTLB-store-misses -r %(PERF_REP)s -x, -o %(PERF_TMP)s --append
#PERF_CMD=perf stat -e iTLB-loads -e iTLB-load-misses -e branch-loads -e branch-load-misses -r %(PERF_REP)s -x, -o %(PERF_TMP)s --append

[DEFAULT]
#Use a BASE_PATH for all customized RVM's installation base path
BASE_PATH=/home/hwang154/workspace

# The GNU R installed in your environment, byte-code compiler enabled
# The first RVM listed here is the default one used by rbench.py
[R-bytecode]
ENV=R_COMPILE_PKGS=1 R_ENABLE_JIT=2
HOME=
CMD=Rscript
ARGS=--vanilla
HARNESS=r_harness.R
HARNESS_ARGS=TRUE

#The GNU R installed in your environment, byte-code compiler disabled
[R]
ENV=R_COMPILE_PKGS=0 R_ENABLE_JIT=0
HOME=
CMD=Rscript
ARGS=--vanilla
HARNESS=r_harness.R
HARNESS_ARGS=FALSE

#All the belows are user defined R VMs. The rbench.py will list them in rvms list
[Rwindows]
ENV=set R_HOME="%(HOME)s" && set R_COMPILE_PKGS=0 && set R_ENABLE_JIT=0 &&
HOME=C:\Program Files\R\R-3.0.2
CMD=bin\i386\Rscript
ARGS=--vanilla
HARNESS=r_harness.R
HARNESS_ARGS=FALSE

[Rwindows-bytecode]
ENV=set R_HOME="%(HOME)s" && set R_COMPILE_PKGS=1 && set R_ENABLE_JIT=2 &&
HOME=C:\Program Files\R\R-3.0.2
CMD=bin\i386\Rscript
ARGS=--vanilla
HARNESS=r_harness.R
HARNESS_ARGS=TRUE

[rbase2.4]
ENV=R_HOME=%(HOME)s R_COMPILE_PKGS=0 R_ENABLE_JIT=0
HOME=%(BASE_PATH)s/R-2.14.1.base
CMD=bin/Rscript
ARGS=--vanilla
HARNESS=r_harness.R
HARNESS_ARGS=FALSE

[rbytecode2.4]
ENV=R_HOME=%(HOME)s R_COMPILE_PKGS=1 R_ENABLE_JIT=2
HOME=%(BASE_PATH)s/R-2.14.1.base
CMD=bin/Rscript
ARGS=--vanilla
HARNESS=r_harness.R
HARNESS_ARGS=TRUE

[rbase3.0]
ENV=R_HOME=%(HOME)s R_COMPILE_PKGS=0 R_ENABLE_JIT=0
HOME=%(BASE_PATH)s/R-3.0.2.base
CMD=bin/Rscript
ARGS=--vanilla
HARNESS=r_harness.R
HARNESS_ARGS=FALSE

[rbytecode3.0]
ENV=R_HOME=%(HOME)s R_COMPILE_PKGS=1 R_ENABLE_JIT=2
HOME=%(BASE_PATH)s/R-3.0.2.base
CMD=bin/Rscript
ARGS=--vanilla
HARNESS=r_harness.R
HARNESS_ARGS=TRUE

[rbase3.1]
ENV=R_HOME=%(HOME)s R_COMPILE_PKGS=0 R_ENABLE_JIT=0
HOME=%(BASE_PATH)s/R-3.1.1.base
CMD=bin/Rscript
ARGS=--vanilla
HARNESS=r_harness.R
HARNESS_ARGS=FALSE

[rbytecode3.1]
ENV=R_HOME=%(HOME)s R_COMPILE_PKGS=1 R_ENABLE_JIT=2
HOME=%(BASE_PATH)s/R-3.1.1.base
CMD=bin/Rscript
ARGS=--vanilla
HARNESS=r_harness.R
HARNESS_ARGS=TRUE

[pqRbase2.5]
ENV=R_HOME=%(HOME)s
HOME=%(BASE_PATH)s/pqR-2013-07-22
CMD=bin/Rscript
ARGS=--vanilla
HARNESS=r_harness.R
HARNESS_ARGS=FALSE

[pqRbytecode2.5]
ENV=R_HOME=%(HOME)s
HOME=%(BASE_PATH)s/pqR-2013-07-22
CMD=bin/Rscript
ARGS=--vanilla
HARNESS=r_harness.R
HARNESS_ARGS=TRUE

[TERR]
ENV=TERR_HOME=%(HOME)s
HOME=%(BASE_PATH)s/TIBCO/terr15
CMD=bin/TERR
ARGS=-f
HARNESS=r_harness.R
HARNESS_ARGS=--args FALSE

##The FastR version with quick start instruction at https://github.com/allr/fastr
[FastR]
ENV=
HOME=
#Home directory will be attached before CMD, so use WORKDIR here
WORKDIR=%(BASE_PATH)s/fastr-master
CMD=java -classpath %(WORKDIR)s/bin:%(WORKDIR)s/lib/antlr-runtime-3.5.jar:%(WORKDIR)s/lib/arpack_combined_all.jar:%(WORKDIR)s/lib/junit-4.8.jar:%(WORKDIR)s/lib/netlib-java-0.9.3.jar:%(WORKDIR)s/lib/truffle-api-28-Jun-13.jar:%(WORKDIR)s/lib/jline-2.12.jar -ea -esa r.Console
ARGS=-f
HARNESS=fastr_harness.R --args
HARNESS_ARGS=FALSE

#The FastR version with full installation instruction at https://github.com/allr/fastr
[FastR-Native]
ENV=CLASSPATH=%(WORKDIR)s/bin:%(WORKDIR)s/lib/antlr-runtime-3.5.jar:%(WORKDIR)s/lib/arpack_combined_all.jar:%(WORKDIR)s/lib/junit-4.8.jar:%(WORKDIR)s/lib/netlib-java-0.9.3.jar:%(WORKDIR)s/lib/jline-2.12.jar
HOME=
#Home directory will be attached before CMD, so use WORKDIR here
WORKDIR=%(BASE_PATH)s/fastr-master
CMD=java -Djava.library.path=%(WORKDIR)s/native:%(WORKDIR)s/native/netlib-java/jni r.Console
ARGS=-f
HARNESS=fastr_harness.R --args
HARNESS_ARGS=FALSE

#Another version of FastR from Oracle
[TruffleR]
ENV=
HOME=
#Home directory will be attached before CMD, so use WORKDIR here
WORKDIR=%(BASE_PATH)s/FastR/fastr
CMD=python
ARGS=
HARNESS=raw_harness.py
ARGC=5
HARNESS_ARGS=%(ARGC)s %(WORKDIR)s mx R -f


[Riposte]
ENV=
WORKDIR=%(BASE_PATH)s/riposte
HOME=
CMD=python
THREADS=1
ARGS=
HARNESS=raw_harness.py
ARGC=6
HARNESS_ARGS=%(ARGC)s %(WORKDIR)s ./riposte -j %(THREADS)s -f

[Renjin]
ENV=
WORKDIR=%(BASE_PATH)s/renjin/renjin-0.7-b1478/bin
HOME=
CMD=python
ARGS=
HARNESS=raw_harness.py
ARGC=4
HARNESS_ARGS=%(ARGC)s %(WORKDIR)s ./renjin -f

[Rapydo]
ENV=
WORKDIR=%(BASE_PATH)s/rapydo/rapydo
HOME=
CMD=python
ARGS=
HARNESS=raw_harness.py
ARGC=4
HARNESS_ARGS=%(ARGC)s %(WORKDIR)s ./shell-c --prog

[ORBIT]
ENV=R_HOME=%(HOME)s R_COMPILE_PKGS=1 R_ENABLE_JIT=2
HOME=%(BASE_PATH)s/R-2.14.1.ropt
CMD=bin/Rscript
ARGS=--vanilla
HARNESS=ORBIT_harness.R
HARNESS_ARGS=TRUE
